{"version":3,"sources":["components/UI/Input/Input.js","components/UI/Input/Input.css","containers/Auth/Auth.css","containers/Auth/Auth.js"],"names":["react__WEBPACK_IMPORTED_MODULE_0__","__webpack_require__","react__WEBPACK_IMPORTED_MODULE_0___default","n","_Input_css__WEBPACK_IMPORTED_MODULE_1__","_Input_css__WEBPACK_IMPORTED_MODULE_1___default","input","props","inputElement","inputClasses","classes","InputElement","invalid","shouldValidate","touched","push","Invalid","elementType","a","createElement","Object","assign","className","join","elementConfig","value","onChange","changed","options","map","option","key","displayValue","Input","Label","label","module","exports","Auth","connect","state","loading","auth","error","isAuthenticated","token","buildingBurger","burgerBuilder","building","authRedirectPath","dispatch","onAuth","email","password","isSignup","actions","onSetAuthRedirectPath","_useState","useState","type","placeholder","validation","required","isEmail","valid","minLength","_useState2","D_ReactProject_howardreact_node_modules_babel_runtime_helpers_esm_slicedToArray__WEBPACK_IMPORTED_MODULE_1__","authForm","setAuthForm","_useState3","_useState4","setIsSignup","useEffect","formElementsArray","id","config","form","formElement","react__WEBPACK_IMPORTED_MODULE_2___default","_components_UI_Input_Input__WEBPACK_IMPORTED_MODULE_5__","event","controlName","updatedControls","updateObject","D_ReactProject_howardreact_node_modules_babel_runtime_helpers_esm_defineProperty__WEBPACK_IMPORTED_MODULE_0__","target","checkValidity","inputChangedHandler","_components_UI_Spinner_Spinner__WEBPACK_IMPORTED_MODULE_7__","errorMessage","message","authRedirect","react_router_dom__WEBPACK_IMPORTED_MODULE_4__","to","onSubmit","preventDefault","_components_UI_Button_Button__WEBPACK_IMPORTED_MODULE_6__","btnType","clicked"],"mappings":"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","file":"static/js/4.bef2cb13.chunk.js","sourcesContent":["import React from 'react';\n\nimport classes from './Input.css';\n\nconst input = ( props ) => {\n    let inputElement = null;\n    const inputClasses = [classes.InputElement];\n\n    if (props.invalid && props.shouldValidate && props.touched) {\n        inputClasses.push(classes.Invalid);\n    }\n\n    switch ( props.elementType ) {\n        case ( 'input' ):\n            inputElement = <input\n                className={inputClasses.join(' ')}\n                {...props.elementConfig}\n                value={props.value}\n                onChange={props.changed} />;\n            break;\n        case ( 'textarea' ):\n            inputElement = <textarea\n                className={inputClasses.join(' ')}\n                {...props.elementConfig}\n                value={props.value}\n                onChange={props.changed} />;\n            break;\n        case ( 'select' ):\n            inputElement = (\n                <select\n                    className={inputClasses.join(' ')}\n                    value={props.value}\n                    onChange={props.changed}>\n                    {props.elementConfig.options.map(option => (\n                        <option key={option.value} value={option.value}>\n                            {option.displayValue}\n                        </option>\n                    ))}\n                </select>\n            );\n            break;\n        default:\n            inputElement = <input\n                className={inputClasses.join(' ')}\n                {...props.elementConfig}\n                value={props.value}\n                onChange={props.changed} />;\n    }\n\n    return (\n        <div className={classes.Input}>\n            <label className={classes.Label}>{props.label}</label>\n            {inputElement}\n        </div>\n    );\n\n};\n\nexport default input;","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Input\":\"Input__Input__1VROp\",\"Label\":\"Input__Label__1tOSX\",\"InputElement\":\"Input__InputElement__3TB0k\",\"Invalid\":\"Input__Invalid__38X2d\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Auth\":\"Auth__Auth__1TInt\"};","import React, { useState, useEffect } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { Redirect } from 'react-router-dom';\r\n\r\nimport Input from '../../components/UI/Input/Input';\r\nimport Button from '../../components/UI/Button/Button';\r\nimport Spinner from '../../components/UI/Spinner/Spinner';\r\nimport classes from './Auth.css';\r\nimport * as actions from '../../store/actions/index';\r\nimport { updateObject, checkValidity } from '../../shared/utility';\r\n\r\nconst auth = (props) => {\r\n  const [authForm, setAuthForm] = useState({\r\n    email: {\r\n      elementType: 'input',\r\n      elementConfig: {\r\n        type: 'email',\r\n        placeholder: 'Mail Address',\r\n      },\r\n      value: '',\r\n      validation: {\r\n        required: true,\r\n        isEmail: true,\r\n      },\r\n      valid: false,\r\n      touched: false,\r\n    },\r\n    password: {\r\n      elementType: 'input',\r\n      elementConfig: {\r\n        type: 'password',\r\n        placeholder: 'Password',\r\n      },\r\n      value: '',\r\n      validation: {\r\n        required: true,\r\n        minLength: 6,\r\n      },\r\n      valid: false,\r\n      touched: false,\r\n    },\r\n  });\r\n  const [isSignup, setIsSignup] = useState(true);\r\n\r\n  useEffect(() => {\r\n    if (!props.buildingBurger && props.authRedirectPath !== '/howardreact') {\r\n      props.onSetAuthRedirectPath();\r\n    }\r\n  }, []);\r\n\r\n  const inputChangedHandler = (event, controlName) => {\r\n    const updatedControls = updateObject(authForm, {\r\n      [controlName]: updateObject(authForm[controlName], {\r\n        value: event.target.value,\r\n        valid: checkValidity(\r\n          event.target.value,\r\n          authForm[controlName].validation\r\n        ),\r\n        touched: true,\r\n      }),\r\n    });\r\n    setAuthForm(updatedControls);\r\n  };\r\n\r\n  const submitHandler = (event) => {\r\n    event.preventDefault();\r\n    props.onAuth(authForm.email.value, authForm.password.value, isSignup);\r\n  };\r\n\r\n  const switchAuthModeHandler = () => {\r\n    setIsSignup(!isSignup);\r\n  };\r\n\r\n  const formElementsArray = [];\r\n  for (let key in authForm) {\r\n    formElementsArray.push({\r\n      id: key,\r\n      config: authForm[key],\r\n    });\r\n  }\r\n\r\n  let form = formElementsArray.map((formElement) => (\r\n    <Input\r\n      key={formElement.id}\r\n      elementType={formElement.config.elementType}\r\n      elementConfig={formElement.config.elementConfig}\r\n      value={formElement.config.value}\r\n      invalid={!formElement.config.valid}\r\n      shouldValidate={formElement.config.validation}\r\n      touched={formElement.config.touched}\r\n      changed={(event) => inputChangedHandler(event, formElement.id)}\r\n    />\r\n  ));\r\n\r\n  if (props.loading) {\r\n    form = <Spinner />;\r\n  }\r\n\r\n  let errorMessage = null;\r\n\r\n  if (props.error) {\r\n    errorMessage = <p>{props.error.message}</p>;\r\n  }\r\n\r\n  let authRedirect = null;\r\n  if (props.isAuthenticated) {\r\n    authRedirect = <Redirect to={props.authRedirectPath} />;\r\n  }\r\n\r\n  return (\r\n    <div className={classes.Auth}>\r\n      {authRedirect}\r\n      {errorMessage}\r\n      <form onSubmit={submitHandler}>\r\n        {form}\r\n        <Button btnType=\"Success\">SUBMIT</Button>\r\n      </form>\r\n      <Button clicked={switchAuthModeHandler} btnType=\"Danger\">\r\n        SWITCH TO {isSignup ? 'SIGNIN' : 'SIGNUP'}\r\n      </Button>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    loading: state.auth.loading,\r\n    error: state.auth.error,\r\n    isAuthenticated: state.auth.token !== null,\r\n    buildingBurger: state.burgerBuilder.building,\r\n    authRedirectPath: state.auth.authRedirectPath,\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {\r\n    onAuth: (email, password, isSignup) =>\r\n      dispatch(actions.auth(email, password, isSignup)),\r\n    onSetAuthRedirectPath: () =>\r\n      dispatch(actions.setAuthRedirectPath('/howardreact')),\r\n  };\r\n};\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(auth);\r\n"],"sourceRoot":""}