{"version":3,"sources":["components/UI/Input/Input.js","components/UI/Input/Input.css","components/Order/CheckoutSummary/CheckoutSummary.css","containers/Checkout/ContactData/ContactData.css","components/Order/CheckoutSummary/CheckoutSummary.js","containers/Checkout/ContactData/ContactData.js","containers/Checkout/Checkout.js"],"names":["react__WEBPACK_IMPORTED_MODULE_0__","__webpack_require__","react__WEBPACK_IMPORTED_MODULE_0___default","n","_Input_css__WEBPACK_IMPORTED_MODULE_1__","_Input_css__WEBPACK_IMPORTED_MODULE_1___default","input","props","inputElement","inputClasses","classes","InputElement","invalid","shouldValidate","touched","push","Invalid","elementType","a","createElement","Object","assign","className","join","elementConfig","value","onChange","changed","options","map","option","key","displayValue","Input","Label","label","module","exports","CheckoutSummary","ContactData","checkoutSummary","react_default","style","width","margin","Burger","ingredients","Button","btnType","clicked","checkoutCancelled","checkoutContinued","connect","state","ings","burgerBuilder","price","totalPrice","loading","order","token","auth","userId","dispatch","onOrderBurger","orderData","actions","withErrorHandler","_useState","useState","name","type","placeholder","validation","required","valid","street","zipCode","minLength","maxLength","isNumeric","country","email","isEmail","deliveryMethod","_useState2","slicedToArray","orderForm","setOrderForm","_useState3","_useState4","formIsValid","setFormIsValid","formElementsArray","id","config","form","onSubmit","event","preventDefault","formData","formElementIdentifier","formElement","inputIdentifier","updatedFormElement","updateObject","target","checkValidity","updatedOrderForm","defineProperty","inputChangedHandler","disabled","Spinner","axios","purchased","summary","Redirect","to","purchasedRedirect","CheckoutSummary_CheckoutSummary","history","goBack","replace","Route","path","match","component"],"mappings":"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","file":"static/js/3.4618cd9c.chunk.js","sourcesContent":["import React from 'react';\n\nimport classes from './Input.css';\n\nconst input = ( props ) => {\n    let inputElement = null;\n    const inputClasses = [classes.InputElement];\n\n    if (props.invalid && props.shouldValidate && props.touched) {\n        inputClasses.push(classes.Invalid);\n    }\n\n    switch ( props.elementType ) {\n        case ( 'input' ):\n            inputElement = <input\n                className={inputClasses.join(' ')}\n                {...props.elementConfig}\n                value={props.value}\n                onChange={props.changed} />;\n            break;\n        case ( 'textarea' ):\n            inputElement = <textarea\n                className={inputClasses.join(' ')}\n                {...props.elementConfig}\n                value={props.value}\n                onChange={props.changed} />;\n            break;\n        case ( 'select' ):\n            inputElement = (\n                <select\n                    className={inputClasses.join(' ')}\n                    value={props.value}\n                    onChange={props.changed}>\n                    {props.elementConfig.options.map(option => (\n                        <option key={option.value} value={option.value}>\n                            {option.displayValue}\n                        </option>\n                    ))}\n                </select>\n            );\n            break;\n        default:\n            inputElement = <input\n                className={inputClasses.join(' ')}\n                {...props.elementConfig}\n                value={props.value}\n                onChange={props.changed} />;\n    }\n\n    return (\n        <div className={classes.Input}>\n            <label className={classes.Label}>{props.label}</label>\n            {inputElement}\n        </div>\n    );\n\n};\n\nexport default input;","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Input\":\"Input__Input__1VROp\",\"Label\":\"Input__Label__1tOSX\",\"InputElement\":\"Input__InputElement__3TB0k\",\"Invalid\":\"Input__Invalid__38X2d\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"CheckoutSummary\":\"CheckoutSummary__CheckoutSummary__-avOx\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"ContactData\":\"ContactData__ContactData__1whvJ\",\"Input\":\"ContactData__Input__2uU-e\"};","import React from 'react';\n\nimport Burger from '../../Burger/Burger';\nimport Button from '../../UI/Button/Button';\nimport classes from './CheckoutSummary.css';\n\nconst checkoutSummary = (props) => {\n    return (\n        <div className={classes.CheckoutSummary}>\n            <h1>We hope it tastes well!</h1>\n            <div style={{width: '100%', margin: 'auto'}}>\n                <Burger ingredients={props.ingredients}/>\n            </div>\n            <Button \n                btnType=\"Danger\"\n                clicked={props.checkoutCancelled}>CANCEL</Button>\n            <Button \n                btnType=\"Success\"\n                clicked={props.checkoutContinued}>CONTINUE</Button>\n        </div>\n    );\n}\n\nexport default checkoutSummary;","import React, { useState } from 'react';\r\nimport { connect } from 'react-redux';\r\n\r\nimport Button from '../../../components/UI/Button/Button';\r\nimport Spinner from '../../../components/UI/Spinner/Spinner';\r\nimport classes from './ContactData.css';\r\nimport axios from '../../../axios-orders';\r\nimport Input from '../../../components/UI/Input/Input';\r\nimport withErrorHandler from '../../../hoc/withErrorHandler/withErrorHandler';\r\nimport * as actions from '../../../store/actions/index';\r\nimport { updateObject, checkValidity } from '../../../shared/utility';\r\n\r\nconst contactData = (props) => {\r\n  const [orderForm, setOrderForm] = useState({\r\n    name: {\r\n      elementType: 'input',\r\n      elementConfig: {\r\n        type: 'text',\r\n        placeholder: 'Your Name',\r\n      },\r\n      value: '',\r\n      validation: {\r\n        required: true,\r\n      },\r\n      valid: false,\r\n      touched: false,\r\n    },\r\n    street: {\r\n      elementType: 'input',\r\n      elementConfig: {\r\n        type: 'text',\r\n        placeholder: 'Street',\r\n      },\r\n      value: '',\r\n      validation: {\r\n        required: true,\r\n      },\r\n      valid: false,\r\n      touched: false,\r\n    },\r\n    zipCode: {\r\n      elementType: 'input',\r\n      elementConfig: {\r\n        type: 'text',\r\n        placeholder: 'ZIP Code',\r\n      },\r\n      value: '',\r\n      validation: {\r\n        required: true,\r\n        minLength: 5,\r\n        maxLength: 5,\r\n        isNumeric: true,\r\n      },\r\n      valid: false,\r\n      touched: false,\r\n    },\r\n    country: {\r\n      elementType: 'input',\r\n      elementConfig: {\r\n        type: 'text',\r\n        placeholder: 'Country',\r\n      },\r\n      value: '',\r\n      validation: {\r\n        required: true,\r\n      },\r\n      valid: false,\r\n      touched: false,\r\n    },\r\n    email: {\r\n      elementType: 'input',\r\n      elementConfig: {\r\n        type: 'email',\r\n        placeholder: 'Your E-Mail',\r\n      },\r\n      value: '',\r\n      validation: {\r\n        required: true,\r\n        isEmail: true,\r\n      },\r\n      valid: false,\r\n      touched: false,\r\n    },\r\n    deliveryMethod: {\r\n      elementType: 'select',\r\n      elementConfig: {\r\n        options: [\r\n          { value: 'fastest', displayValue: 'Fastest' },\r\n          { value: 'cheapest', displayValue: 'Cheapest' },\r\n        ],\r\n      },\r\n      value: 'fastest',\r\n      validation: {},\r\n      valid: true,\r\n    },\r\n  });\r\n  const [formIsValid, setFormIsValid] = useState(false);\r\n\r\n  const orderHandler = (event) => {\r\n    event.preventDefault();\r\n\r\n    const formData = {};\r\n    for (let formElementIdentifier in orderForm) {\r\n      formData[formElementIdentifier] = orderForm[formElementIdentifier].value;\r\n    }\r\n    const order = {\r\n      ingredients: props.ings,\r\n      price: props.price,\r\n      orderData: formData,\r\n      userId: props.userId,\r\n    };\r\n\r\n    props.onOrderBurger(order, props.token);\r\n  };\r\n\r\n  const inputChangedHandler = (event, inputIdentifier) => {\r\n    const updatedFormElement = updateObject(orderForm[inputIdentifier], {\r\n      value: event.target.value,\r\n      valid: checkValidity(\r\n        event.target.value,\r\n        orderForm[inputIdentifier].validation\r\n      ),\r\n      touched: true,\r\n    });\r\n    const updatedOrderForm = updateObject(orderForm, {\r\n      [inputIdentifier]: updatedFormElement,\r\n    });\r\n\r\n    let formIsValid = true;\r\n    for (let inputIdentifier in updatedOrderForm) {\r\n      formIsValid = updatedOrderForm[inputIdentifier].valid && formIsValid;\r\n    }\r\n    setOrderForm(updatedOrderForm);\r\n    setFormIsValid(formIsValid);\r\n  };\r\n\r\n  const formElementsArray = [];\r\n  for (let key in orderForm) {\r\n    formElementsArray.push({\r\n      id: key,\r\n      config: orderForm[key],\r\n    });\r\n  }\r\n  let form = (\r\n    <form onSubmit={orderHandler}>\r\n      {formElementsArray.map((formElement) => (\r\n        <Input\r\n          key={formElement.id}\r\n          elementType={formElement.config.elementType}\r\n          elementConfig={formElement.config.elementConfig}\r\n          value={formElement.config.value}\r\n          invalid={!formElement.config.valid}\r\n          shouldValidate={formElement.config.validation}\r\n          touched={formElement.config.touched}\r\n          changed={(event) => inputChangedHandler(event, formElement.id)}\r\n        />\r\n      ))}\r\n      <Button btnType=\"Success\" disabled={!formIsValid}>\r\n        ORDER\r\n      </Button>\r\n    </form>\r\n  );\r\n  if (props.loading) {\r\n    form = <Spinner />;\r\n  }\r\n  return (\r\n    <div className={classes.ContactData}>\r\n      <h4>Enter your Contact Data</h4>\r\n      {form}\r\n    </div>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    ings: state.burgerBuilder.ingredients,\r\n    price: state.burgerBuilder.totalPrice,\r\n    loading: state.order.loading,\r\n    token: state.auth.token,\r\n    userId: state.auth.userId,\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {\r\n    onOrderBurger: (orderData, token) =>\r\n      dispatch(actions.purchaseBurger(orderData, token)),\r\n  };\r\n};\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(withErrorHandler(contactData, axios));\r\n","// import React, { Component } from 'react';\r\n// import { Route, Redirect } from 'react-router-dom';\r\n// import { connect } from 'react-redux';\r\n\r\n// import CheckoutSummary from '../../components/Order/CheckoutSummary/CheckoutSummary';\r\n// import ContactData from './ContactData/ContactData';\r\n\r\n// class Checkout extends Component {\r\n//   // state = {\r\n//   //     ingredients: null,\r\n//   //     totalPrice: 0\r\n//   // }\r\n//   // componentWillMount() {\r\n//   //     const query = new URLSearchParams(this.props.location.search);\r\n//   //     const ingredients = {};\r\n//   //     let price = 0;\r\n//   //     for (let param of query.entries()) {\r\n//   //         // ['salad', '1']\r\n//   //         if (param[0] === 'price') {\r\n//   //             price = param[1];\r\n//   //         } else {\r\n//   //             ingredients[param[0]] = param[1];\r\n//   //         }\r\n//   //     }\r\n//   //     console.log(price);\r\n//   //     console.log(ingredients);\r\n//   //     this.setState({ingredients:ingredients, totalPrice: price});\r\n//   // }\r\n//   checkoutCancelledHandler = () => {\r\n//     this.props.history.goBack();\r\n//   };\r\n//   checkoutContinuedHandler = () => {\r\n//     this.props.history.replace('/howardreact/checkout/contact-data');\r\n//   };\r\n//   // render() {\r\n//   //     return (\r\n//   //         <div>\r\n//   //             <CheckoutSummary\r\n//   //             ingredients={this.state.ingredients}\r\n//   //             checkoutCancelled={this.checkoutCancelledHandler}\r\n//   //             checkoutContinued={this.checkoutContinuedHandler}\r\n//   //             />\r\n//   //             <Route\r\n//   //             path={this.props.match.path + '/contact-data'}\r\n//   //             // component={ContactData}\r\n//   //             render={(props) => (<ContactData\r\n//   //                 ingredients={this.state.ingredients}\r\n//   //                 price={this.state.totalPrice}\r\n//   //                 {...props} />)}\r\n//   //             />\r\n//   //         </div>\r\n//   //     );\r\n//   // }\r\n//   render() {\r\n//     //this.props.purchased has a problem after purchase success and order again it will redirect to main page\r\n//     let summary = <Redirect to=\"/howardreact\" />;\r\n//     if (this.props.ings) {\r\n//       const purchasedRedirect = this.props.purchased ? (\r\n//         <Redirect to=\"/howardreact\" />\r\n//       ) : null;\r\n//       summary = (\r\n//         <div>\r\n//           {purchasedRedirect}\r\n//           <CheckoutSummary\r\n//             ingredients={this.props.ings}\r\n//             checkoutCancelled={this.checkoutCancelledHandler}\r\n//             checkoutContinued={this.checkoutContinuedHandler}\r\n//           />\r\n//           <Route\r\n//             path={this.props.match.path + '/contact-data'}\r\n//             component={ContactData}\r\n//           />\r\n//         </div>\r\n//       );\r\n//     }\r\n//     return summary;\r\n//   }\r\n// }\r\n\r\n// const mapStateToProps = (state) => {\r\n//   return {\r\n//     // ings: state.ingredients\r\n//     ings: state.burgerBuilder.ingredients,\r\n//     purchased: state.order.purchased,\r\n//   };\r\n// };\r\n\r\n// export default connect(mapStateToProps)(Checkout);\r\nimport React from 'react';\r\nimport { Route, Redirect } from 'react-router-dom';\r\nimport { connect } from 'react-redux';\r\n\r\nimport CheckoutSummary from '../../components/Order/CheckoutSummary/CheckoutSummary';\r\nimport ContactData from './ContactData/ContactData';\r\n\r\nconst checkout = (props) => {\r\n  const checkoutCancelledHandler = () => {\r\n    props.history.goBack();\r\n  };\r\n\r\n  const checkoutContinuedHandler = () => {\r\n    props.history.replace('/howardreact/checkout/contact-data');\r\n  };\r\n\r\n  let summary = <Redirect to=\"/howardreact\" />;\r\n  if (props.ings) {\r\n    const purchasedRedirect = props.purchased ? (\r\n      <Redirect to=\"/howardreact\" />\r\n    ) : null;\r\n    summary = (\r\n      <div>\r\n        {purchasedRedirect}\r\n        <CheckoutSummary\r\n          ingredients={props.ings}\r\n          checkoutCancelled={checkoutCancelledHandler}\r\n          checkoutContinued={checkoutContinuedHandler}\r\n        />\r\n        <Route\r\n          path={props.match.path + '/contact-data'}\r\n          component={ContactData}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n  return summary;\r\n};\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    ings: state.burgerBuilder.ingredients,\r\n    purchased: state.order.purchased,\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps)(checkout);\r\n"],"sourceRoot":""}