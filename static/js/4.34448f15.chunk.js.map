{"version":3,"sources":["components/UI/Input/Input.js","components/UI/Input/Input.css","containers/Auth/Auth.css","containers/Auth/Auth.js"],"names":["react__WEBPACK_IMPORTED_MODULE_0__","__webpack_require__","react__WEBPACK_IMPORTED_MODULE_0___default","n","_Input_css__WEBPACK_IMPORTED_MODULE_1__","_Input_css__WEBPACK_IMPORTED_MODULE_1___default","input","props","inputElement","inputClasses","classes","InputElement","invalid","shouldValidate","touched","push","Invalid","elementType","a","createElement","Object","assign","className","join","elementConfig","value","onChange","changed","options","map","option","key","displayValue","Input","Label","label","module","exports","Auth","state","controls","email","type","placeholder","validation","required","isEmail","valid","password","minLength","isSignup","inputChangedHandler","event","controlName","updatedControls","updateObject","_this","D_ReactProject_howardreact_node_modules_babel_runtime_helpers_esm_defineProperty__WEBPACK_IMPORTED_MODULE_0__","target","checkValidity","setState","submitHandler","preventDefault","onAuth","switchAuthModeHandler","prevState","this","buildingBurger","authRedirectPath","onSetAuthRedirectPath","_this2","formElementsArray","id","config","form","formElement","react__WEBPACK_IMPORTED_MODULE_6___default","_components_UI_Input_Input__WEBPACK_IMPORTED_MODULE_9__","loading","_components_UI_Spinner_Spinner__WEBPACK_IMPORTED_MODULE_11__","errorMessage","error","message","authRedirect","isAuthenticated","react_router_dom__WEBPACK_IMPORTED_MODULE_8__","to","Fragment","_components_BurgerHeader_BurgerHeader__WEBPACK_IMPORTED_MODULE_15__","onSubmit","_components_UI_Button_Button__WEBPACK_IMPORTED_MODULE_10__","btnType","clicked","Component","connect","auth","token","burgerBuilder","building","dispatch","actions"],"mappings":"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","file":"static/js/4.34448f15.chunk.js","sourcesContent":["import React from 'react';\n\nimport classes from './Input.css';\n\nconst input = ( props ) => {\n    let inputElement = null;\n    const inputClasses = [classes.InputElement];\n\n    if (props.invalid && props.shouldValidate && props.touched) {\n        inputClasses.push(classes.Invalid);\n    }\n\n    switch ( props.elementType ) {\n        case ( 'input' ):\n            inputElement = <input\n                className={inputClasses.join(' ')}\n                {...props.elementConfig}\n                value={props.value}\n                onChange={props.changed} />;\n            break;\n        case ( 'textarea' ):\n            inputElement = <textarea\n                className={inputClasses.join(' ')}\n                {...props.elementConfig}\n                value={props.value}\n                onChange={props.changed} />;\n            break;\n        case ( 'select' ):\n            inputElement = (\n                <select\n                    className={inputClasses.join(' ')}\n                    value={props.value}\n                    onChange={props.changed}>\n                    {props.elementConfig.options.map(option => (\n                        <option key={option.value} value={option.value}>\n                            {option.displayValue}\n                        </option>\n                    ))}\n                </select>\n            );\n            break;\n        default:\n            inputElement = <input\n                className={inputClasses.join(' ')}\n                {...props.elementConfig}\n                value={props.value}\n                onChange={props.changed} />;\n    }\n\n    return (\n        <div className={classes.Input}>\n            <label className={classes.Label}>{props.label}</label>\n            {inputElement}\n        </div>\n    );\n\n};\n\nexport default input;","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Input\":\"Input__Input__1VROp\",\"Label\":\"Input__Label__1tOSX\",\"InputElement\":\"Input__InputElement__3TB0k\",\"Invalid\":\"Input__Invalid__38X2d\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Auth\":\"Auth__Auth__1TInt\"};","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { Redirect } from 'react-router-dom';\r\n\r\nimport Input from '../../components/UI/Input/Input';\r\nimport Button from '../../components/UI/Button/Button';\r\nimport Spinner from '../../components/UI/Spinner/Spinner';\r\n\r\nimport classes from './Auth.css';\r\nimport * as actions from '../../store/actions/index';\r\nimport { updateObject, checkValidity } from '../../shared/utility';\r\nimport BurgerHeader from '../../components/BurgerHeader/BurgerHeader';\r\nclass Auth extends Component {\r\n    state = {\r\n        controls: {\r\n            email: {\r\n                elementType: 'input',\r\n                elementConfig: {\r\n                    type: 'email',\r\n                    placeholder: 'Mail Address'\r\n                },\r\n                value: '',\r\n                validation: {\r\n                    required: true,\r\n                    isEmail: true\r\n                },\r\n                valid: false,\r\n                touched: false\r\n            },\r\n            password: {\r\n                elementType: 'input',\r\n                elementConfig: {\r\n                    type: 'password',\r\n                    placeholder: 'Password'\r\n                },\r\n                value: '',\r\n                validation: {\r\n                    required: true,\r\n                    minLength: 6\r\n                },\r\n                valid: false,\r\n                touched: false\r\n            }\r\n        },\r\n        isSignup: true\r\n    }\r\n\r\n    componentDidMount() {\r\n        if (!this.props.buildingBurger && this.props.authRedirectPath !== '/burger') {\r\n            this.props.onSetAuthRedirectPath();\r\n        }\r\n    }\r\n\r\n\r\n\r\n    inputChangedHandler = ( event, controlName ) => {\r\n        const updatedControls = updateObject(this.state.controls, {\r\n            [controlName]: updateObject(this.state.controls[controlName], {\r\n                value: event.target.value,\r\n                valid:checkValidity( event.target.value, this.state.controls[controlName].validation ),\r\n                touched: true\r\n            })\r\n        });\r\n        this.setState( { controls: updatedControls } );\r\n    }\r\n\r\n    submitHandler = ( event ) => {\r\n        event.preventDefault();\r\n        this.props.onAuth( this.state.controls.email.value, this.state.controls.password.value, this.state.isSignup );\r\n    }\r\n\r\n    switchAuthModeHandler = () => {\r\n        this.setState(prevState => {\r\n            return {isSignup: !prevState.isSignup};\r\n        });\r\n    }\r\n\r\n    render () {\r\n        const formElementsArray = [];\r\n        for ( let key in this.state.controls ) {\r\n            formElementsArray.push( {\r\n                id: key,\r\n                config: this.state.controls[key]\r\n            } );\r\n        }\r\n\r\n        let form = formElementsArray.map( formElement => (\r\n            <Input\r\n                key={formElement.id}\r\n                elementType={formElement.config.elementType}\r\n                elementConfig={formElement.config.elementConfig}\r\n                value={formElement.config.value}\r\n                invalid={!formElement.config.valid}\r\n                shouldValidate={formElement.config.validation}\r\n                touched={formElement.config.touched}\r\n                changed={( event ) => this.inputChangedHandler( event, formElement.id )} />\r\n        ) );\r\n\r\n        if (this.props.loading) {\r\n            form = <Spinner />\r\n        }\r\n\r\n        let errorMessage = null;\r\n\r\n        if (this.props.error) {\r\n            errorMessage = (\r\n                <p>{this.props.error.message}</p>\r\n            );\r\n        }\r\n\r\n        let authRedirect = null;\r\n        if (this.props.isAuthenticated) {\r\n            authRedirect = <Redirect to={this.props.authRedirectPath}/>\r\n        }\r\n\r\n        return (\r\n            <React.Fragment>\r\n            <BurgerHeader />\r\n            <div className={classes.Auth}>\r\n                {authRedirect}\r\n                {errorMessage}\r\n                <form onSubmit={this.submitHandler}>\r\n                    {form}\r\n                    <Button btnType=\"Success\">SUBMIT</Button>\r\n                </form>\r\n                <Button \r\n                    clicked={this.switchAuthModeHandler}\r\n                    btnType=\"Danger\">SWITCH TO {this.state.isSignup ? 'SIGNIN' : 'SIGNUP'}</Button>\r\n            </div>\r\n            </React.Fragment>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        loading: state.auth.loading,\r\n        error: state.auth.error,\r\n        isAuthenticated: state.auth.token !== null,\r\n        buildingBurger: state.burgerBuilder.building,\r\n        authRedirectPath: state.auth.authRedirectPath\r\n    };\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        onAuth: ( email, password, isSignup ) => dispatch( actions.auth( email, password, isSignup ) ),\r\n        onSetAuthRedirectPath: () => dispatch(actions.setAuthRedirectPath('/burger'))\r\n    };\r\n};\r\nexport default connect( mapStateToProps, mapDispatchToProps )( Auth );"],"sourceRoot":""}