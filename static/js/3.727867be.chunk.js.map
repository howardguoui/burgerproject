{"version":3,"sources":["components/UI/Input/Input.js","components/UI/Input/Input.css","components/Order/CheckoutSummary/CheckoutSummary.css","containers/Checkout/ContactData/ContactData.css","components/Order/CheckoutSummary/CheckoutSummary.js","containers/Checkout/ContactData/ContactData.js","containers/Checkout/Checkout.js"],"names":["input","props","inputElement","inputClasses","classes","InputElement","invalid","shouldValidate","touched","push","Invalid","elementType","className","join","elementConfig","value","onChange","changed","options","map","option","key","displayValue","Input","Label","label","module","exports","checkoutSummary","CheckoutSummary","style","width","margin","Burger","ingredients","Button","btnType","clicked","checkoutCancelled","checkoutContinued","connect","state","ings","burgerBuilder","price","totalPrice","loading","order","token","auth","userId","dispatch","onOrderBurger","orderData","actions","withErrorHandler","useState","name","type","placeholder","validation","required","valid","street","zipCode","minLength","maxLength","isNumeric","country","email","isEmail","deliveryMethod","orderForm","setOrderForm","formIsValid","setFormIsValid","formElementsArray","id","config","form","onSubmit","event","preventDefault","formData","formElementIdentifier","formElement","inputIdentifier","updatedFormElement","updateObject","target","checkValidity","updatedOrderForm","inputChangedHandler","disabled","Spinner","ContactData","axios","purchased","summary","Redirect","to","purchasedRedirect","history","goBack","replace","Route","path","match","component"],"mappings":"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","file":"static/js/3.727867be.chunk.js","sourcesContent":["import React from 'react';\n\nimport classes from './Input.css';\n\nconst input = ( props ) => {\n    let inputElement = null;\n    const inputClasses = [classes.InputElement];\n\n    if (props.invalid && props.shouldValidate && props.touched) {\n        inputClasses.push(classes.Invalid);\n    }\n\n    switch ( props.elementType ) {\n        case ( 'input' ):\n            inputElement = <input\n                className={inputClasses.join(' ')}\n                {...props.elementConfig}\n                value={props.value}\n                onChange={props.changed} />;\n            break;\n        case ( 'textarea' ):\n            inputElement = <textarea\n                className={inputClasses.join(' ')}\n                {...props.elementConfig}\n                value={props.value}\n                onChange={props.changed} />;\n            break;\n        case ( 'select' ):\n            inputElement = (\n                <select\n                    className={inputClasses.join(' ')}\n                    value={props.value}\n                    onChange={props.changed}>\n                    {props.elementConfig.options.map(option => (\n                        <option key={option.value} value={option.value}>\n                            {option.displayValue}\n                        </option>\n                    ))}\n                </select>\n            );\n            break;\n        default:\n            inputElement = <input\n                className={inputClasses.join(' ')}\n                {...props.elementConfig}\n                value={props.value}\n                onChange={props.changed} />;\n    }\n\n    return (\n        <div className={classes.Input}>\n            <label className={classes.Label}>{props.label}</label>\n            {inputElement}\n        </div>\n    );\n\n};\n\nexport default input;","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Input\":\"Input__Input__1VROp\",\"Label\":\"Input__Label__1tOSX\",\"InputElement\":\"Input__InputElement__3TB0k\",\"Invalid\":\"Input__Invalid__38X2d\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"CheckoutSummary\":\"CheckoutSummary__CheckoutSummary__-avOx\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"ContactData\":\"ContactData__ContactData__1whvJ\",\"Input\":\"ContactData__Input__2uU-e\"};","import React from 'react';\n\nimport Burger from '../../Burger/Burger';\nimport Button from '../../UI/Button/Button';\nimport classes from './CheckoutSummary.css';\n\nconst checkoutSummary = (props) => {\n    return (\n        <div className={classes.CheckoutSummary}>\n            <h1>We hope it tastes well!</h1>\n            <div style={{width: '100%', margin: 'auto'}}>\n                <Burger ingredients={props.ingredients}/>\n            </div>\n            <Button \n                btnType=\"Danger\"\n                clicked={props.checkoutCancelled}>CANCEL</Button>\n            <Button \n                btnType=\"Success\"\n                clicked={props.checkoutContinued}>CONTINUE</Button>\n        </div>\n    );\n}\n\nexport default checkoutSummary;","import React, { useState } from 'react';\r\nimport { connect } from 'react-redux';\r\n\r\nimport Button from '../../../components/UI/Button/Button';\r\nimport Spinner from '../../../components/UI/Spinner/Spinner';\r\nimport classes from './ContactData.css';\r\nimport axios from '../../../axios-orders';\r\nimport Input from '../../../components/UI/Input/Input';\r\nimport withErrorHandler from '../../../hoc/withErrorHandler/withErrorHandler';\r\nimport * as actions from '../../../store/actions/index';\r\nimport { updateObject, checkValidity } from '../../../shared/utility';\r\n\r\nconst contactData = (props) => {\r\n  const [orderForm, setOrderForm] = useState({\r\n    name: {\r\n      elementType: 'input',\r\n      elementConfig: {\r\n        type: 'text',\r\n        placeholder: 'Your Name',\r\n      },\r\n      value: '',\r\n      validation: {\r\n        required: true,\r\n      },\r\n      valid: false,\r\n      touched: false,\r\n    },\r\n    street: {\r\n      elementType: 'input',\r\n      elementConfig: {\r\n        type: 'text',\r\n        placeholder: 'Street',\r\n      },\r\n      value: '',\r\n      validation: {\r\n        required: true,\r\n      },\r\n      valid: false,\r\n      touched: false,\r\n    },\r\n    zipCode: {\r\n      elementType: 'input',\r\n      elementConfig: {\r\n        type: 'text',\r\n        placeholder: 'ZIP Code',\r\n      },\r\n      value: '',\r\n      validation: {\r\n        required: true,\r\n        minLength: 5,\r\n        maxLength: 5,\r\n        isNumeric: true,\r\n      },\r\n      valid: false,\r\n      touched: false,\r\n    },\r\n    country: {\r\n      elementType: 'input',\r\n      elementConfig: {\r\n        type: 'text',\r\n        placeholder: 'Country',\r\n      },\r\n      value: '',\r\n      validation: {\r\n        required: true,\r\n      },\r\n      valid: false,\r\n      touched: false,\r\n    },\r\n    email: {\r\n      elementType: 'input',\r\n      elementConfig: {\r\n        type: 'email',\r\n        placeholder: 'Your E-Mail',\r\n      },\r\n      value: '',\r\n      validation: {\r\n        required: true,\r\n        isEmail: true,\r\n      },\r\n      valid: false,\r\n      touched: false,\r\n    },\r\n    deliveryMethod: {\r\n      elementType: 'select',\r\n      elementConfig: {\r\n        options: [\r\n          { value: 'fastest', displayValue: 'Fastest' },\r\n          { value: 'cheapest', displayValue: 'Cheapest' },\r\n        ],\r\n      },\r\n      value: 'fastest',\r\n      validation: {},\r\n      valid: true,\r\n    },\r\n  });\r\n  const [formIsValid, setFormIsValid] = useState(false);\r\n\r\n  const orderHandler = (event) => {\r\n    event.preventDefault();\r\n\r\n    const formData = {};\r\n    for (let formElementIdentifier in orderForm) {\r\n      formData[formElementIdentifier] = orderForm[formElementIdentifier].value;\r\n    }\r\n    const order = {\r\n      ingredients: props.ings,\r\n      price: props.price,\r\n      orderData: formData,\r\n      userId: props.userId,\r\n    };\r\n\r\n    props.onOrderBurger(order, props.token);\r\n  };\r\n\r\n  const inputChangedHandler = (event, inputIdentifier) => {\r\n    const updatedFormElement = updateObject(orderForm[inputIdentifier], {\r\n      value: event.target.value,\r\n      valid: checkValidity(\r\n        event.target.value,\r\n        orderForm[inputIdentifier].validation\r\n      ),\r\n      touched: true,\r\n    });\r\n    const updatedOrderForm = updateObject(orderForm, {\r\n      [inputIdentifier]: updatedFormElement,\r\n    });\r\n\r\n    let formIsValid = true;\r\n    for (let inputIdentifier in updatedOrderForm) {\r\n      formIsValid = updatedOrderForm[inputIdentifier].valid && formIsValid;\r\n    }\r\n    setOrderForm(updatedOrderForm);\r\n    setFormIsValid(formIsValid);\r\n  };\r\n\r\n  const formElementsArray = [];\r\n  for (let key in orderForm) {\r\n    formElementsArray.push({\r\n      id: key,\r\n      config: orderForm[key],\r\n    });\r\n  }\r\n  let form = (\r\n    <form onSubmit={orderHandler}>\r\n      {formElementsArray.map((formElement) => (\r\n        <Input\r\n          key={formElement.id}\r\n          elementType={formElement.config.elementType}\r\n          elementConfig={formElement.config.elementConfig}\r\n          value={formElement.config.value}\r\n          invalid={!formElement.config.valid}\r\n          shouldValidate={formElement.config.validation}\r\n          touched={formElement.config.touched}\r\n          changed={(event) => inputChangedHandler(event, formElement.id)}\r\n        />\r\n      ))}\r\n      <Button btnType=\"Success\" disabled={!formIsValid}>\r\n        ORDER\r\n      </Button>\r\n    </form>\r\n  );\r\n  if (props.loading) {\r\n    form = <Spinner />;\r\n  }\r\n  return (\r\n    <div className={classes.ContactData}>\r\n      <h4>Enter your Contact Data</h4>\r\n      {form}\r\n    </div>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    ings: state.burgerBuilder.ingredients,\r\n    price: state.burgerBuilder.totalPrice,\r\n    loading: state.order.loading,\r\n    token: state.auth.token,\r\n    userId: state.auth.userId,\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {\r\n    onOrderBurger: (orderData, token) =>\r\n      dispatch(actions.purchaseBurger(orderData, token)),\r\n  };\r\n};\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(withErrorHandler(contactData, axios));\r\n","// import React, { Component } from 'react';\r\n// import { Route, Redirect } from 'react-router-dom';\r\n// import { connect } from 'react-redux';\r\n\r\n// import CheckoutSummary from '../../components/Order/CheckoutSummary/CheckoutSummary';\r\n// import ContactData from './ContactData/ContactData';\r\n\r\n// class Checkout extends Component {\r\n//   // state = {\r\n//   //     ingredients: null,\r\n//   //     totalPrice: 0\r\n//   // }\r\n//   // componentWillMount() {\r\n//   //     const query = new URLSearchParams(this.props.location.search);\r\n//   //     const ingredients = {};\r\n//   //     let price = 0;\r\n//   //     for (let param of query.entries()) {\r\n//   //         // ['salad', '1']\r\n//   //         if (param[0] === 'price') {\r\n//   //             price = param[1];\r\n//   //         } else {\r\n//   //             ingredients[param[0]] = param[1];\r\n//   //         }\r\n//   //     }\r\n//   //     console.log(price);\r\n//   //     console.log(ingredients);\r\n//   //     this.setState({ingredients:ingredients, totalPrice: price});\r\n//   // }\r\n//   checkoutCancelledHandler = () => {\r\n//     this.props.history.goBack();\r\n//   };\r\n//   checkoutContinuedHandler = () => {\r\n//     this.props.history.replace('/howardreact/checkout/contact-data');\r\n//   };\r\n//   // render() {\r\n//   //     return (\r\n//   //         <div>\r\n//   //             <CheckoutSummary\r\n//   //             ingredients={this.state.ingredients}\r\n//   //             checkoutCancelled={this.checkoutCancelledHandler}\r\n//   //             checkoutContinued={this.checkoutContinuedHandler}\r\n//   //             />\r\n//   //             <Route\r\n//   //             path={this.props.match.path + '/contact-data'}\r\n//   //             // component={ContactData}\r\n//   //             render={(props) => (<ContactData\r\n//   //                 ingredients={this.state.ingredients}\r\n//   //                 price={this.state.totalPrice}\r\n//   //                 {...props} />)}\r\n//   //             />\r\n//   //         </div>\r\n//   //     );\r\n//   // }\r\n//   render() {\r\n//     //this.props.purchased has a problem after purchase success and order again it will redirect to main page\r\n//     let summary = <Redirect to=\"/howardreact\" />;\r\n//     if (this.props.ings) {\r\n//       const purchasedRedirect = this.props.purchased ? (\r\n//         <Redirect to=\"/howardreact\" />\r\n//       ) : null;\r\n//       summary = (\r\n//         <div>\r\n//           {purchasedRedirect}\r\n//           <CheckoutSummary\r\n//             ingredients={this.props.ings}\r\n//             checkoutCancelled={this.checkoutCancelledHandler}\r\n//             checkoutContinued={this.checkoutContinuedHandler}\r\n//           />\r\n//           <Route\r\n//             path={this.props.match.path + '/contact-data'}\r\n//             component={ContactData}\r\n//           />\r\n//         </div>\r\n//       );\r\n//     }\r\n//     return summary;\r\n//   }\r\n// }\r\n\r\n// const mapStateToProps = (state) => {\r\n//   return {\r\n//     // ings: state.ingredients\r\n//     ings: state.burgerBuilder.ingredients,\r\n//     purchased: state.order.purchased,\r\n//   };\r\n// };\r\n\r\n// export default connect(mapStateToProps)(Checkout);\r\nimport React from 'react';\r\nimport { Route, Redirect } from 'react-router-dom';\r\nimport { connect } from 'react-redux';\r\n\r\nimport CheckoutSummary from '../../components/Order/CheckoutSummary/CheckoutSummary';\r\nimport ContactData from './ContactData/ContactData';\r\n\r\nconst checkout = (props) => {\r\n  const checkoutCancelledHandler = () => {\r\n    props.history.goBack();\r\n  };\r\n\r\n  const checkoutContinuedHandler = () => {\r\n    props.history.replace('/howardreact/checkout/contact-data');\r\n  };\r\n\r\n  let summary = <Redirect to=\"/howardreact\" />;\r\n  if (props.ings) {\r\n    const purchasedRedirect = props.purchased ? (\r\n      <Redirect to=\"/howardreact\" />\r\n    ) : null;\r\n    summary = (\r\n      <div>\r\n        {purchasedRedirect}\r\n        <CheckoutSummary\r\n          ingredients={props.ings}\r\n          checkoutCancelled={checkoutCancelledHandler}\r\n          checkoutContinued={checkoutContinuedHandler}\r\n        />\r\n        <Route\r\n          path={props.match.path + '/contact-data'}\r\n          component={ContactData}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n  return summary;\r\n};\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    ings: state.burgerBuilder.ingredients,\r\n    purchased: state.order.purchased,\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps)(checkout);\r\n"],"sourceRoot":""}